{"version":3,"sources":["redux/actions/userAction.ts","redux/actions/usertype.ts","Pages/User.tsx","Pages/Poke.tsx","redux/actions/PokemonActions.ts","redux/actions/PokemonActionTypes.ts","Header/Header.tsx","App.tsx","serviceWorker.ts","redux/reducers/PokemonReducer.ts","redux/reducers/usersReducer.ts","redux/RootReducer.ts","redux/Store.ts","index.tsx"],"names":["fetchUsersRequest","type","fetchUsersSuccess","users","payload","fetchUsersFailure","error","User","dispatch","useDispatch","useSelector","state","useEffect","axios","get","then","response","data","console","log","catch","message","Table","striped","bordered","hover","variant","map","user","key","id","name","username","Poke","useState","pokemonName","setPokemonName","pokemonState","pokemon","className","onChange","event","target","value","onClick","a","res","src","sprites","front_default","alt","abilities","ability","Header","to","App","exact","path","component","Boolean","window","location","hostname","match","defaultState","loading","pokemonReducer","action","initialState","reducer","RootReducer","combineReducers","userReducer","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb1733fc.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nimport {\r\n  FETCH_USERS_REQUEST,\r\n  FETCH_USERS_SUCCESS,\r\n  FETCH_USERS_FAILURE\r\n} from '../actions/usertype'\r\n\r\nexport const fetchUsers = () => {\r\n  return (dispatch: any) => {\r\n    dispatch(fetchUsersRequest())\r\n    axios\r\n      .get('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => {\r\n\r\n        // response.data is the users\r\n\r\n       const users = response.data\r\n\r\n       console.log(users)\r\n     \r\n        dispatch(fetchUsersSuccess(users))\r\n      })\r\n      .catch(error => {\r\n        // error.message is the error message\r\n        dispatch(fetchUsersFailure(error.message))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchUsersRequest = () => {\r\n  return {\r\n    type: FETCH_USERS_REQUEST\r\n  }\r\n}\r\n\r\nexport const fetchUsersSuccess = (users:any) => {\r\n  return {\r\n    type: FETCH_USERS_SUCCESS,\r\n    payload: users\r\n  }\r\n}\r\n\r\nexport const fetchUsersFailure = (error:any) => {\r\n  return {\r\n    type: FETCH_USERS_FAILURE,\r\n    payload: error\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* import {Dispatch} from \"redux\";\r\nimport {\r\n\r\n    FETCH_USERS_REQUEST,\r\n    FETCH_USERS_SUCCESS,\r\n    FETCH_USERS_FAILURE\r\n}\r\nfrom \"./usertype\";\r\nimport axios from \"axios\";\r\n\r\nexport const fetchUsers = (users: string) => async (dispatch: Dispatch<usersDispatchTypes>)  => {\r\n  try {\r\n    dispatch({\r\n      type: FETCH_USERS_REQUEST\r\n    })\r\n\r\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n\r\n    dispatch({\r\n      type: FETCH_USERS_SUCCESS,\r\n      payload: res.data\r\n    })\r\n\r\n  } catch(e) {\r\n    dispatch({\r\n      type:  FETCH_USERS_FAILURE\r\n    })\r\n  }\r\n};\r\n\r\n\r\n\r\n*/\r\n\r\n","export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'\r\n\r\n"," \r\nimport React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch} from 'react-redux'\r\nimport {fetchUsers} from '../redux/actions/userAction'\r\nimport {RootStore} from \"../redux/Store\";\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Table from 'react-bootstrap/Table'\r\n\r\n\r\nfunction User() {\r\n\r\n    const dispatch = useDispatch()\r\n    const users = useSelector((state: RootStore) => state.users);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchUsers()) \r\n      }, [])\r\n      console.log()\r\n\r\n    return (\r\n      <div >        \r\n<>\r\n                <Table striped bordered hover variant=\"dark\">\r\n                  <thead>\r\n                      <th>ID</th>\r\n                      <th>Name</th>\r\n                      <th>Username</th>                  \r\n                   </thead>\r\n\r\n                        {users &&\r\n                        users.users.map((user:any)=>\r\n\r\n                    <tr key={user}  > \r\n                        <td>{user.id}</td>\r\n                        <td>{user.name}</td>\r\n                        <td>{user.username}</td>            \r\n                        </tr>\r\n\r\n                 )} \r\n            </Table>  \r\n</>\r\n      </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\n\r\nexport default User\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStore} from \"../redux/Store\";\r\nimport {GetPokemon} from \"../redux/actions/PokemonActions\"\r\n\r\nfunction Poke() {\r\n  const dispatch = useDispatch();\r\n  const [pokemonName, setPokemonName] = useState(\"\");\r\n  const pokemonState = useSelector((state: RootStore) => state.pokemon);\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => setPokemonName(event.target.value);\r\n  const handleSubmit = () => dispatch(GetPokemon(pokemonName));\r\n\r\n  console.log(\"pokemon state:\", pokemonState);\r\n  return (\r\n    <div className=\"App\">\r\n      <input type=\"text\" onChange={handleChange}/>\r\n      <button onClick={handleSubmit}>Search</button>\r\n      {pokemonState.pokemon && (\r\n        <div>\r\n          <img src={pokemonState.pokemon.sprites.front_default} alt=\"\"/>\r\n          {pokemonState.pokemon.abilities.map(ability => {\r\n            return <p>{ability.ability.name}</p>\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Poke;\r\n","import {Dispatch} from \"redux\";\r\nimport {\r\n\r\n  POKEMON_FAIL,\r\n  POKEMON_LOADING,\r\n  POKEMON_SUCCESS,\r\n  PokemonDispatchTypes,\r\n\r\n}\r\n from \"./PokemonActionTypes\";\r\nimport axios from \"axios\";\r\n\r\nexport const GetPokemon = (pokemon: string) => async (dispatch: Dispatch<PokemonDispatchTypes>) => {\r\n  try {\r\n    dispatch({\r\n      type: POKEMON_LOADING\r\n    })\r\n\r\n    const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon}`);\r\n\r\n    dispatch({\r\n      type: POKEMON_SUCCESS,\r\n      payload: res.data\r\n    })\r\n\r\n  } catch(e) {\r\n    dispatch({\r\n      type: POKEMON_FAIL\r\n    })\r\n  }\r\n};","export const POKEMON_LOADING = \"POKEMON_LOADING\";\r\nexport const POKEMON_FAIL = \"POKEMON_FAIL\";\r\nexport const POKEMON_SUCCESS = \"POKEMON_SUCCESS\";\r\n\r\nexport type PokemonType = {\r\n  abilities: PokemonAbility[],\r\n  sprites: PokemonSprites,\r\n  stats: PokemonStat[]\r\n}\r\n\r\nexport type PokemonAbility = {\r\n  ability: {\r\n    name: string\r\n    url: string\r\n  }\r\n}\r\n\r\nexport type PokemonSprites = {\r\n  front_default: string\r\n}\r\n\r\nexport type PokemonStat = {\r\n  base_stat: number,\r\n  stat: {\r\n    name: string\r\n  }\r\n}\r\n\r\nexport interface PokemonLoading {\r\n  type: typeof POKEMON_LOADING\r\n}\r\n\r\nexport interface PokemonFail {\r\n  type: typeof POKEMON_FAIL\r\n}\r\n\r\nexport interface PokemonSuccess {\r\n  type: typeof POKEMON_SUCCESS,\r\n  payload: PokemonType\r\n}\r\n\r\nexport type PokemonDispatchTypes = PokemonLoading | PokemonFail | PokemonSuccess","import React from 'react'\r\nimport {Link} from 'react-router-dom' \r\n\r\n\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n \r\n  <nav>\r\n          <ul>\r\n\r\n                <li>\r\n                  <Link to=\"/\">None</Link>\r\n                </li>\r\n                <li>\r\n                  <Link to=\"/User\">UserList</Link>\r\n                </li>\r\n\r\n                <li>\r\n                  <Link to=\"/PoKe\">Search Pokemon</Link>\r\n                </li>\r\n    \r\n            </ul>\r\n\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport './App.css';\r\nimport User from './Pages/User'\r\nimport Poke from './Pages/Poke'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route \r\n  \r\n} from 'react-router-dom'\r\n\r\nimport Header from './Header/Header'\r\n\r\nconst  App:React.FC =() => {\r\n  return (\r\n\r\n    <BrowserRouter> \r\n    <Header/>\r\n         <Switch>\r\n     \r\n           <Route exact path=\"/\" /> \r\n           <Route path=\"/User\" component={User} />\r\n           <Route path=\"/Poke\" component={Poke}/>\r\n                  \r\n         </Switch>\r\n    \r\n    </BrowserRouter>\r\n\r\n  )\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n  POKEMON_FAIL,\r\n  POKEMON_LOADING,\r\n  POKEMON_SUCCESS,\r\n  PokemonDispatchTypes,\r\n  PokemonType\r\n} from \"../actions/PokemonActionTypes\";\r\n\r\ninterface DefaultStateI {\r\n  loading: boolean,\r\n  pokemon?: PokemonType\r\n}\r\n\r\nconst defaultState: DefaultStateI = {\r\n  loading: false\r\n};\r\n\r\nconst pokemonReducer = (state: DefaultStateI = defaultState, action: PokemonDispatchTypes) : DefaultStateI => {\r\n  switch (action.type) {\r\n    case POKEMON_FAIL:\r\n      return {\r\n        loading: false,\r\n      }\r\n    case POKEMON_LOADING:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case POKEMON_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        pokemon: action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n};\r\n\r\n\r\nexport default pokemonReducer","import {\r\n    FETCH_USERS_REQUEST,\r\n    FETCH_USERS_SUCCESS,\r\n    FETCH_USERS_FAILURE\r\n  } from '../actions/usertype'\r\n  \r\n  const initialState = {\r\n    loading: false,\r\n    users: [],\r\n    error: ''\r\n  }\r\n  const reducer = (state = initialState, action:any) => {\r\n    switch (action.type) {\r\n      case FETCH_USERS_REQUEST:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        }\r\n      \r\n      case FETCH_USERS_SUCCESS:\r\n        return {\r\n          loading: false,\r\n          users: action.payload,\r\n          error: ''\r\n        }\r\n      case FETCH_USERS_FAILURE:\r\n        return {\r\n          loading: false,\r\n          users: [],\r\n          error: action.payload\r\n        }\r\n      default: return state\r\n    }\r\n  }\r\n  \r\n  export default reducer\r\n\r\n\r\n\r\n\r\n  /* \r\ninterface DefaultStateI {\r\n  loading: boolean,\r\n  pokemon?: PokemonType\r\n}\r\n\r\nconst defaultState: DefaultStateI = {\r\n  loading: false\r\n};\r\n\r\nconst pokemonReducer = (state: DefaultStateI = defaultState, action: PokemonDispatchTypes) : DefaultStateI => { */\r\n/*     interface DefaultStateI {\r\n      \r\n        loading: boolean,\r\n        users: [],\r\n        error: ''\r\n      }\r\n\r\n\r\nconst reducer = (state:  DefaultStateI = defaultState) */","import {combineReducers} from \"redux\";\r\nimport pokemonReducer from \"./reducers/PokemonReducer\";\r\nimport userReducer from \"./reducers/usersReducer\"\r\n\r\nconst RootReducer = combineReducers({\r\n  pokemon: pokemonReducer,\r\n  users: userReducer\r\n\r\n});\r\n\r\nexport default RootReducer","import {createStore, applyMiddleware} from \"redux\";\r\nimport RootReducer from \"./RootReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst Store = createStore(RootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport type RootStore = ReturnType<typeof RootReducer>\r\n\r\nexport default Store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from './redux/Store'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}